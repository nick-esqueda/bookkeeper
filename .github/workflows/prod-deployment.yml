name: PROD Deployment

on:
  push:
    branches: [ "main", "feature/ci-cd" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write # Required for requesting a JWT from the GH OIDC Provider
  contents: read  # Required for actions

jobs:
  push_api_to_ecr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
        
      - name: Set up QEMU # Allows GitHub Runner to emulate arm64 (for creating cross-platform builds)
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx # To create cross-platform Docker images
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials # For assuming an AWS Role capable of pushing to ECR 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::975050165509:role/github-actions-role
          aws-region: us-east-1

      - name: Log in to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      # - name: Build with Maven
      #   run: |
      #     cd backend
      #     mvn clean install

      # - name: Build and Push Multi-Arch Docker Image
      #   run: |
      #     export REPO_URI=public.ecr.aws/f0d1e9f6/lacey-bees-book-inventory-image-repo
      #     docker buildx build --platform linux/amd64,linux/arm64 -t $REPO_URI:latest --push ./backend

      - name: Prepare SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/ec2-key.pem
          chmod 600 ~/ec2-key.pem

      - name: Connect to EC2 and Restart App
        env:
          EC2_HOST_NAME: ${{ secrets.EC2_HOST_NAME }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/ec2-key.pem ec2-user@$EC2_HOST_NAME << 'EOF'
              ~./backup-mysql-to-s3.sh
          EOF
          rm ~/ec2-key.pem

  # deploy_frontend:
  #   runs-on: ubuntu-latest
  #   # needs: push_api_to_ecr # Ensures frontend deploy waits for the backend job to complete

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials # For assuming an AWS Role capable of S3 and CloudFront actions
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: arn:aws:iam::975050165509:role/github-actions-role
  #         aws-region: us-east-2

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '16'

  #     - name: Install Frontend Dependencies
  #       run: |
  #         cd frontend
  #         npm install

  #     - name: Build Frontend
  #       env:
  #         REACT_APP_BASE_URL: ${{ secrets.REACT_APP_BASE_URL }}
  #       run: |
  #         cd frontend
  #         npm run build

  #     - name: Sync S3 Bucket
  #       run: |
  #         aws s3 sync frontend/build s3://laceybeesbookinventory.nickesqueda.com --delete

  #     - name: Invalidate CloudFront Cache
  #       run: |
  #         aws cloudfront create-invalidation --distribution-id E3JBES0K7PYMT8 --paths "/*"

